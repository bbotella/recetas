name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Initialize database
      run: |
        python -c "
        import os
        os.environ['DATABASE_PATH'] = 'test_recipes.db'
        from database import init_database
        init_database()
        "
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_PATH: test_recipes.db
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Run basic functionality test
      run: |
        python run_tests.py
      env:
        DATABASE_PATH: test_recipes.db
        FLASK_ENV: testing
    
    - name: Generate coverage report
      run: |
        python coverage_report.py
    
    - name: Test application startup
      run: |
        timeout 10s python app.py || echo "Application started successfully"
      env:
        DATABASE_PATH: test_recipes.db
        FLASK_ENV: testing

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint
    
    - name: Run Black code formatter check
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Run Flake8 linter
      run: |
        flake8 --max-line-length=88 --extend-ignore=E203,W503 .
      continue-on-error: true
    
    - name: Run Pylint
      run: |
        pylint --disable=all --enable=unused-import,undefined-variable,syntax-error *.py
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run Safety check for known vulnerabilities
      run: |
        safety check
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json
      if: always()

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Docker image
      run: |
        docker build -t tia-carmen-app .
    
    - name: Test Docker container
      run: |
        docker run -d -p 5000:5000 --name test-container tia-carmen-app
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your hosting platform"
        # Add your deployment commands here
        # Examples:
        # - Deploy to Heroku
        # - Deploy to AWS
        # - Deploy to Google Cloud
        # - Deploy to DigitalOcean
        # - Push to Docker registry