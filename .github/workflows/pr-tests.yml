name: Pull Request Tests

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python run_tests.py
      env:
        DATABASE_PATH: test_recipes.db
        FLASK_ENV: testing
    
    - name: Generate coverage report
      run: |
        python coverage_report.py
      env:
        DATABASE_PATH: test_recipes.db
        FLASK_ENV: testing

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint
    
    - name: Run Black code formatter check
      run: |
        echo "Running Black formatter check..."
        black --check --diff . || echo "Black formatting issues found"
      continue-on-error: true
    
    - name: Run Flake8 linter
      run: |
        echo "Running Flake8 linter..."
        flake8 --max-line-length=88 --extend-ignore=E203,W503 . || echo "Flake8 issues found"
      continue-on-error: true
    
    - name: Run Pylint
      run: |
        echo "Running Pylint..."
        pylint --disable=all --enable=unused-import,undefined-variable,syntax-error *.py || echo "Pylint issues found"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run Safety check for known vulnerabilities
      run: |
        echo "Running Safety check..."
        safety check || echo "Safety issues found"
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: |
        echo "Running Bandit security scan..."
        bandit -r . -f json -o bandit-report.json || echo "Bandit issues found"
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report-pr-${{ github.event.number }}
        path: bandit-report.json
      if: always()

  validate:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate CI/CD setup
      run: |
        python validate_cicd.py
      env:
        DATABASE_PATH: test_recipes.db
        FLASK_ENV: testing
    
    - name: Test application startup
      run: |
        timeout 15s python app.py || echo "Application startup test completed"
      env:
        DATABASE_PATH: test_recipes.db
        FLASK_ENV: testing
        FLASK_PORT: 5000

  pr-summary:
    runs-on: ubuntu-latest
    needs: [test, lint, security, validate]
    if: always()
    
    steps:
    - name: PR Test Summary
      run: |
        echo "## Pull Request Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Status:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Lint Status:** ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Security Status:** ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Validation Status:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ All tests passed across Python 3.9, 3.10, and 3.11" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed - please review the test results" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.lint.result }}" = "success" ]; then
          echo "✅ Code style checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Code style issues found - consider running formatters" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security.result }}" = "success" ]; then
          echo "✅ Security scans passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security issues found - please review" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- If all tests pass, your PR is ready for review" >> $GITHUB_STEP_SUMMARY
        echo "- If tests fail, please fix the issues and push again" >> $GITHUB_STEP_SUMMARY
        echo "- Code will be automatically deployed after merge to main" >> $GITHUB_STEP_SUMMARY